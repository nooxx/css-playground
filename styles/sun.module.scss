@use "sass:math";
/// Mixin to place items on a circle
/// @param {Integer} $item-count - Number of items on the circle
/// @param {Length} $circle-size - Large circle size
/// @param {Length} $item-width - Single item width
/// @param {Length} $item-height - Single item height
@mixin on-circle($item-count, $circle-size, $item-width, $item-height) {
  position: relative;
  width:  $circle-size;
  height: $circle-size;
  padding: 0;
  border-radius: 50%;
  list-style: none;

  > * {
    display: block;
    position: absolute;
    top:  50%;
    left: 50%;
    width:  $item-width;
    height: $item-height;
    margin: math.div(-$item-height, 2) math.div(-$item-width, 2);

    $angle: math.div(360, $item-count);
    $rot: 0;

    @for $i from 1 through $item-count {
      &:nth-of-type(#{$i}) {
        transform:
                rotate($rot * 1deg)
                translate(math.div($circle-size, 2))
                rotate($rot * -1deg);
      }

      $rot: $rot + $angle;
    }
  }
}

.sun {
  height: 350px;
  width: 350px;
  border-radius: 100%;
  background-color: #ffc900;
  position: relative;
  animation: grow 3s ease infinite;

  &__heart {
    position: absolute;
    top: 50%;
    left: 50%;
    will-change: transform;
    transform: translate(-50%, -50%) scale(1);
    transform-origin: top left;
    width: 55%;
    height: 55%;
    border-radius: 100%;
    background-color: #fd6f01;
  }

  &__cornerContainer {
    @include on-circle($item-count: 12, $circle-size: 350px, $item-width: 88px, $item-height: 88px);

    div {
      background-color: black;
      border-radius: 50%;
      animation: grow 1.5s ease infinite alternate;
    }
  }
}

@keyframes grow {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(0.75);
  }
}
